import { verify } from 'crypto';
import { readFileSync } from 'fs';
import { argv0 } from 'process';

const file = readFileSync('inputs/day11', 'utf8').trimEnd();

console.log(file)

const blinks = 75
// const blinks = 75

const memo: Map<string, number> = new Map()

const fileArr = file.split(' ')
let total = 0
for (let char of fileArr) {
  console.log("get the number of stones generated by: ", char)
  const sum = processBlinks(char, blinks)
  console.log("sum: ", sum)

  const key = char + '-' + blinks
  if (!memo.has(key)) {
    memo.set(key, sum)
    // console.log("set memory for : ", key, " to ", sum)
  }

  total += sum

}
console.log("Final result: ", total)


function processBlinks(char: string, blinks: number): number {
  if (blinks === 0) return 1

  const key = char + '-' + blinks

  if (memo.has(key)) {
    return memo.get(key)!
  }

  const childs = processStone(char)
  let total = 0
  for (let char of childs) {
    // console.log("get the number of stones generated by: ", char)
    const sum = processBlinks(char, blinks - 1)
    total += sum
  }

  if (!memo.has(key)) {
    memo.set(key, total)
    // console.log("set memory for : ", key, " to ", total)
  }

  return total
}


function processStone(stone: string): string[] {
  if (stone === '0') return ['1']
  // console.log(stone.length)
  if (stone.length % 2 === 0) {
    const half = stone.length / 2
    // console.log(" half : ", half)
    // console.log(Number(stone.slice(0, half)))
    return [
      Number(stone.slice(0, half)).toString(),
      Number(stone.slice(half, stone.length)).toString()
    ]
  }


  return [(Number(stone) * 2024).toString()]
}
